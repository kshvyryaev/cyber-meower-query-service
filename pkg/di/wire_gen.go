// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/kshvyryaev/cyber-meower-query-service/pkg"
	"github.com/kshvyryaev/cyber-meower-query-service/pkg/controller/http"
	"github.com/kshvyryaev/cyber-meower-query-service/pkg/controller/http/middleware"
	"github.com/kshvyryaev/cyber-meower-query-service/pkg/search"
	"github.com/kshvyryaev/cyber-meower-query-service/pkg/usecase"
)

// Injectors from wire.go:

func InitializeHttpServer() (*http.HttpServer, func(), error) {
	config, err := pkg.ProvideConfig()
	if err != nil {
		return nil, nil, err
	}
	client, err := search.ProvideElastic(config)
	if err != nil {
		return nil, nil, err
	}
	elasticMeowRepository := search.ProvideElasticMeowRepository(client)
	meowUsecase := usecase.ProvideMeowUsecase(elasticMeowRepository)
	meowController := http.ProvideMeowController(meowUsecase)
	logger, cleanup, err := pkg.ProvideZap()
	if err != nil {
		return nil, nil, err
	}
	errorHandlerMiddleware := middleware.ProvideErrorHandlerMiddleware(logger)
	recoveryHandlerMiddleware := middleware.ProvideRecoveryHandlerMiddleware(logger)
	httpServer := http.ProvideHttpServer(config, meowController, errorHandlerMiddleware, recoveryHandlerMiddleware)
	return httpServer, func() {
		cleanup()
	}, nil
}
